Constructing terms (or likewise goals):

	a structured term: new Funct("itsname".intern(),<arg1>,<arg2>, ...)

	an atom: new Const("itsname".intern()) ;

	an integer: new Int(17) ; // if 17 is its value

	a variable: new Var(M) ; // where M is the PrologMachine you activate


make sure that if in the goal the same variable occurs twice, you do the same

as an example:

the term

	foo(X,bar(zof,X),Y)

is created by

	PrologObject varX = new Var(M) ;
	PrologObject varY = new Var(M) ;
	PrologObject Term =
		new Funct("foo".intern(),
			  varX,
			  new Funct("bar".intern(),
					new Const("zof".intern()),
					varX
				   ),
			  varY
			 ) ;

Note that [33,44] is equivalent to .(33, .(44, []))
so the constructors are a bit unfriendly towards lists.

===============

Inspecting a term Term:

always first dereference it: Term =  Term.deref() ;

then test its class with instanceof:

	if (Term instanceof Funct)
		{ Funct F = (Funct)Term ;
		  // now you can get the name by F.Name
		  // its arity by F.Arity()
		  // its arguments are in the array F.Arguments
		  // don not forget to dereference them when you
		  // inspect them !!!
		}
	else
	if (Term instanceof Const)
		{ Const C = (Const)Term ;
		  // now you can get the name by C.Name
		}
	else
	if (Term instanceof Int)
                { Int I = (Int)Term ;
                  // now you can get the name by I.IntValue
                }
	else
	// it is a Var - if you need variables in the answer, tell
	// me why, then I will tell you how to deal with them in
	// answers
